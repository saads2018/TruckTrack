@page "/createDelivery/{searchInput}"
@using Microsoft.AspNetCore.Identity
@using Newtonsoft.Json
@using NpgsqlTypes
@using RestSharp
@using System.Net.Http.Headers
@using System.Text
@using TruckTrack.Data
@using System.IO;
@using Microsoft.AspNetCore.Http;
@using SixLabors.ImageSharp;
@using SixLabors.ImageSharp.Processing;
@using SixLabors.ImageSharp.Formats.Jpeg;
@using System.IO;
@using Microsoft.AspNetCore.Http;
@using Plk.Blazor.DragDrop;
@using TruckTrack.Models
@inject ApplicationDbContext dbContext
@inject IJSRuntime jsRuntime
@inject SignInManager<AdvancedUser> _signInManager;
@inject AuthenticationStateProvider authenticate;
@inject NavigationManager nav;
@inject IConfiguration config;
@inject IJSRuntime jsRunTime

<AuthorizeView>
    <Authorized>

        <style>

            .inserting {
                border-top: 1px solid black;
                margin-top: 5px;
            }

        </style>
        @if (_signInManager.IsSignedIn(context.User) && dbContext.Users.Where(x => x.UserName == context.User.Identity.Name).FirstOrDefault().Admin == true)
        {
            @if (searchInput == "add" || dbContext.deliveriesList.ToList().Where(x => x.DeliveryId.ToString() == searchInput).FirstOrDefault() != null)
            {

                <h3>Manage Deliveries</h3>

                <section style="margin-top:3%;">
                    <h5><b>Create A Delivery</b></h5>
                    <div style="margin-top:1%;">
                        <label style="margin-left:5px;">Select One Of The Available Drivers: </label>
                        <select id="driversList" style="margin-top:10px; width:40%;height:35px;" class="form-control">
                            @foreach (var driver in driversList)
                            {
                                <option value="@driver.FullName:@driver.UserName">
                                    @driver.FullName
                                </option>
                            }
                        </select>
                    </div>

                    <div style="margin-top:1.5%;">
                        <label style="margin-left:5px;">Add A Business (In Sequence): </label>
                        <InputFile accept=".jpeg, .jpg, .png" OnChange="@HandleFileChange" style="color:transparent; display:none;" id="uploadImg" />
                        <label for="uploadImg" style="margin-left:2px; padding-left:10px; padding-right:10px;" class="btn btn-sm btn-primary">Upload Image</label>
                        <button @onclick="@(e=>addButton())" style="margin-left:1px; width:150px;" id="addBusiness" type="submit" class="btn btn-sm btn-primary">Add Business</button>
                        @*<select @bind="selectedPage" id="pgSelect" style="margin-top:10px; width:40%;height:35px;" class="form-control">
                        @foreach (var name in pages)
                        {
                            <option value="@name.pgNumber">
                                @name.pgNumber
                            </option>
                        }
                    </select>
                    <select @ref="select" id="routeList321" style="overflow:auto; margin-top:10px; width:40%;height:35px;" class="form-control">
                        @foreach (var name in customers[selectedPage - 1])
                        {
                            <option value="@name.BusinessName">
                                @name.BusinessName
                        </option>
                    }
                </select>*@
                        <div style="margin-top:10px;">
                            <div class="container" style="display:flex;">
                            <input autocomplete="off" @onclick="@(e=>zipSearch())" @oninput="@(e=>changeName())" style="width:41%; margin-left:-10px; height:35px;" class="form-control" type="text" id="name" />
                            <input hidden id="address" />  
                            <div style="margin-left:10px; margin-top:2px; display:none;" id="load" class="loader"></div>
                            </div>
                            <div id="list" class="form-control" style="@hide">
                                @foreach (var cust in filterList)
                                {
                                    <a style="height:70px;" @onclick="@(e=>setName(cust.BusinessName,cust.Address1))" role="button" id="dropdownMenuLink" aria-haspopup="true" aria-expanded="false">
                                        @cust.BusinessName
                                        <br />
                                        <span style="color:gray;">@cust.Address1</span>
                                        <br>
                                        <br />
                                    </a>
                                }
                            </div>
                    </div>
                <div id="routeCard"  style=" display:none; overflow-y:auto; width:40%;height:300px; white-space:nowrap; overflow-x:auto" class="mt-2 card list-group-item">
                     <ul style="list-style-type:circle;">
                        @foreach (var item in Items)
                        {
                            <li draggable="true"
                    class="@(DragEnter==item?"inserting":"")"
                    @key=@item.Id
                    id="@item.Id"
                    ondragover="event.preventDefault();"
                    @ondragstart="@( (e) => hondragstart(e, item))"
                    @ondrop="@( () => hondropOverAFriend(item))"
                    @ondragenter="@( ()=> hondragenter(item) )">

                    <div style="padding:5px; display:flex" class="container border draggable">
                         <div style="width:80%; margin-left:5px; margin-top:3px;">
                            <label class="name" value="@item.Id" >@getName(item.Label,30)</label>
                            <br>
                            <label class="addresses" style="margin-top:3px;">@getName(item.Address,30)</label>
                        </div>
                        @if(item.Invoice!="")
                        {
                            <button class="btn btn-sm btn-primary" @onclick="@(e=>openTab(item.Invoice))" style="margin-right:2px; margin-top:2px;"> View </button>
                        }else
                        {
                          <button class="btn btn-sm btn-primary" disabled style="margin-right:2px; opacity:0; margin-top:2px;"> View </button>
                        }

                        <button class="btn btn-sm btn-danger" @onclick="@(e=>deleteList(item))" style="margin-top:2px;">Delete</button>
                    </div>
                    <br>
                </li>
                        }
                       @* <div style="height: 1.5em;"
                     ondragover="event.preventDefault();"
                     @ondrop="hondropBotton"
                     @ondragenter="hondragenterBotton" />*@
                    </ul>
                </div>

            </div>

            <div class="container" style="display:flex;">
             <button style="margin-top:1.5%;" id="Submit" onclick="@createDelivery" type="submit" class="btn btn-sm btn-primary">Create</button>
             <div style="margin-left:10px; margin-top:20px; display:none;" id="load1" class="loader"></div>
            </div>



                   
        </section>



        }
    }
    else
    {
        <p>You must be logged in as an admin to view this page.</p>
    }
    </Authorized>
    <NotAuthorized>
        <p>You must be logged in to view this page.</p>
    </NotAuthorized>
</AuthorizeView>
@code {

    [Parameter]
    public string? searchInput { get; set; }

    public List<AdvancedUser>? driversList { get; set; }
    public ElementReference select{ get; set; }
    public int selectedPage{ get; set; }
    public int currentCustID = -1;
    public IDictionary<int, string> storedInvoices  = new Dictionary<int, string>();

    public byte[] currentImage = null;
    private string inputName = "";
    private string inputZip = "";
    public List<List<Customer>> customers{ get; set; }
    public List<Page> pages { get; set; }
    public int totalCount { get; set; }
    const int selectLimit = 500;
    public List<Customer> custLit { get; set; }
    public string hide;
    public List<Customer> filterList { get; set; }
    public List<Customer> fullCustomersList { get; set; }
    public int countItems = 0;
    public int items = 1;
    public bool dragging = false;
    private bool editCompleted = false;

    public class Page{
        public int pgNumber{ get; set; }
        public int items { get; set; }
    }

    protected override Task OnInitializedAsync()
    {
        totalCount = dbContext.customersList.ToList().Count;
        driversList = dbContext.Users.ToList().Where(x => x.Driver == true && (searchInput == "add" ? (dbContext.deliveriesList.ToList().Where(y => y.DriverUserName == x.UserName && y.DeliveryStatus != "Ended").FirstOrDefault() == null) : (x.UserName == dbContext.deliveriesList.Where(z => z.DeliveryId.ToString() == searchInput).FirstOrDefault().DriverUserName || (dbContext.deliveriesList.ToList().Where(y => y.DriverUserName == x.UserName && y.DeliveryStatus != "Ended").FirstOrDefault() == null)))).ToList();
        pages = new List<Page>();
        customers = new List<List<Customer>>();
        int count = totalCount / selectLimit;
        int left = totalCount % selectLimit;

        fullCustomersList = dbContext.customersList.ToList();
        jsRunTime.InvokeVoidAsync("hideList", DotNetObjectReference.Create(this));
        hide = "margin-left:10px; width:33.7%; overflow-y: z-index:9999;  padding-top:10px; padding-left:20px;  auto; height:300px; position:fixed; display:none";
        filterList = new List<Customer>();

        if (totalCount <= selectLimit)
        {
            Page pg = new Page();
            pg.pgNumber = 1;
            pg.items = totalCount;
            pages.Add(pg);
        }
        else
        {
            for (int i = 0; i < count; i++)
            {
                Page pg1 = new Page();
                pg1.pgNumber = i+1;
                pg1.items = selectLimit;
                pages.Add(pg1);
            }

            if(left>0)
            {
                Page pg = new Page();
                pg.pgNumber = pages.Count + 1;
                pg.items = left;
                pages.Add(pg);
            }
        }

        customers.Add(dbContext.customersList.ToList().Take(pages[0].items).ToList());

        for (int i = 1; i < pages.Count; i++)
            customers.Add(dbContext.customersList.ToList().Skip(pages[i-1].pgNumber*selectLimit).Take(pages[i].items).ToList());

        selectedPage = pages.Count > 0 ? 1: - 1;
        return base.OnInitializedAsync();
    }

    private async Task HandleFileChange(InputFileChangeEventArgs e)
    {
        var file = e.File;
        await jsRunTime.InvokeVoidAsync("loaderVisibility", "block");
        await saveImage(file);
        await getInfo();
        await addButton();
        await jsRunTime.InvokeVoidAsync("loaderVisibility", "none");
    }

    private async Task openTab(string value)
    {
        await jsRunTime.InvokeVoidAsync("openNewTab", value);
    }
    public async Task<string> UploadImage(byte[] image)
    {
        string clientId = "1a9fbb7c205d3bd";

        using (var httpClient = new HttpClient())
        {
            httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Client-ID", clientId);

            using (var form = new MultipartFormDataContent())
            {
                form.Add(new ByteArrayContent(image), "image", "image.jpg");

                using (var response = await httpClient.PostAsync("https://api.imgur.com/3/image", form))
                {
                    if (response.IsSuccessStatusCode)
                    {
                        string responseData = await response.Content.ReadAsStringAsync();
                        dynamic data = JsonConvert.DeserializeObject(responseData);
                        string imageUrl = data.data.link;
                        return imageUrl;
                    }
                    else
                    {
                        throw new Exception("Failed to upload image: " + response.StatusCode);
                    }
                }
            }
        }
    }


    private async Task saveImage(IBrowserFile file)
    {
        string directory = Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments) + "\\TruckTrack";
        string filePath = directory + "\\truckTrackImg.jpeg";
        try
        {
            File.Delete(filePath);
            Directory.Delete(directory);
        }
        catch(Exception ex)
        {

        }

        Directory.CreateDirectory(directory);

        byte[] imageData;

        try
        {
            using (var memory = new MemoryStream())
            {
                await file.OpenReadStream().CopyToAsync(memory);
                imageData = memory.ToArray();
                currentImage = imageData;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine("Error uploading image: " + ex.Message);
        }

        try
        {
            using (FileStream fileStream = new FileStream(filePath, FileMode.Create))
            {
                await file.OpenReadStream(maxAllowedSize:10000000).CopyToAsync(fileStream);
            }
        }
        catch (Exception ex)
        {

        }
    }

    private async Task getInfo()
    {
        string directory = Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments) + "\\TruckTrack";
        string filePath = directory + "\\truckTrackImg.jpeg";

        var options = new RestClientOptions("https://xm.tryier.com:6001")
            {
                MaxTimeout = -1,
            };
        var client = new RestClient(options);
        var request = new RestRequest("/Ocr", Method.Post);
        request.AddHeader("Authorization", "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1lIjoiYXBpdXNlciIsImp0aSI6IjI4ZGZhN2QyLTc1NDctNGMxYS05NTVkLTY2NWQzZmU3NWJiZiIsImh0dHA6Ly9zY2hlbWFzLm1pY3Jvc29mdC5jb20vd3MvMjAwOC8wNi9pZGVudGl0eS9jbGFpbXMvcm9sZSI6IkFwcGxpY2F0aW9uIiwiZXhwIjoxNzE3MzY2MTY3LCJpc3MiOiJodHRwczovL3htLnRyeWllci5jb206NjAwMSJ9.yhLWch3TicNWTUDBcg6IVVEuK1WdtRrSTOvLIj1HO1A");
        request.AlwaysMultipartFormData = true;
        request.AddFile("file", filePath);
        RestResponse response = await client.ExecuteAsync(request);
        var result = (response.Content);
        List<string> words = JsonConvert.DeserializeObject<List<string>?>(response.Content);
        string list = String.Join(" ", words);
        Customer cust = new Customer();

        foreach(var customer in fullCustomersList)
        {
            if (!String.IsNullOrWhiteSpace(customer.BusinessName) && !String.IsNullOrWhiteSpace(customer.Address1))
            {
                bool match = true;
                List<string> nameList = customer.BusinessName.Split(" ").ToList();
                List<string> addressList = customer.Address1.Split(" ").ToList();
                foreach(var n in nameList)
                {
                    if(!list.Contains(n.Trim()))
                    {
                        match = false;
                        break;
                    }
                }

                if(match)
                {
                    foreach (var a in addressList)
                    {
                        if (!list.Contains(a.Trim()))
                        {
                            match = false;
                            break;
                        }
                    }
                }

                if (match)
                {
                    cust = customer;
                    break;
                }
            }
        }

        if(cust.BusinessName==null && cust.Address1==null)
        {
            await jsRuntime.InvokeVoidAsync("msg", "No Matching Businesses Were Found!");
        }
        else
        {
            await setName(cust.BusinessName, cust.Address1);
            currentCustID = cust.CustId;
            filterList.Add(cust);
        }

        try
        {
            File.Delete(filePath);
            Directory.Delete(directory);
        }
        catch(Exception ex)
        {

        }
    }

    private async Task deleteList(Item item)
    {
        Items.Remove(item);
        countItems = Items.Count;

        if(Items.Count==0)
            await jsRuntime.InvokeVoidAsync("showDriverList", "none");
        StateHasChanged();
    }

    private async Task zipSearch()
    {
        if (!String.IsNullOrWhiteSpace(inputZip))
            await changeName();
    }

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        if (searchInput != "add" && firstRender)
        {
            var delivery = dbContext.deliveriesList.ToList().Where(x => x.DeliveryId.ToString() == searchInput).FirstOrDefault();
            var delList = delivery.DeliveryRoutes.Trim().Substring(0, delivery.DeliveryRoutes.Length - 1).Split(':');
            var addressList = delivery.RouteAddresses.Trim().Substring(0, delivery.RouteAddresses.Length - 1).Split(':');

            for(int i =0;i<delList.Length;i++)
            {
                addToList(delList[i], addressList[i],1,delivery.Invoices[i]);
            }

            jsRuntime.InvokeVoidAsync("setDriver", "driversList", delivery.DeliveryDriver,delivery.DriverUserName);
            jsRuntime.InvokeVoidAsync("setValue", "Submit", "Save");
        }

        if (Items.Count!=countItems && !dragging)
        {
            if(searchInput != "add" && !editCompleted)
            {
                foreach(var item in Items)
                    jsRunTime.InvokeVoidAsync("dragEndCallback", item?.Id, DotNetObjectReference.Create(this));
                editCompleted = true;
                countItems = Items.Count;
            }
            else
            {
                jsRunTime.InvokeVoidAsync("dragEndCallback", storedItem?.Id, DotNetObjectReference.Create(this));
                countItems = Items.Count;
            }
        }
        return base.OnAfterRenderAsync(firstRender);
    }

    [JSInvokable]
    private void completeEdit()
    {
        editCompleted = true;
    }

    private string getName(string name, int length=8)
    {
        name = name.Trim();
        if (name.Length > length)
            name = name.Substring(0, length) + "...";

        return name;
    }

    public async Task addButton()
    {
        string name = await jsRuntime.InvokeAsync<string>("getNameValue");
        string address = await jsRuntime.InvokeAsync<string>("getAddressValue");

        var msg = "";

        if (String.IsNullOrWhiteSpace(name.Trim()))
        {
            msg = "Kindly Enter An Input Before Continuing!";
            await jsRuntime.InvokeVoidAsync("msg", msg);
            return;
        }
        else if (filterList.Where(x => x.BusinessName?.Trim() == name.Trim()).FirstOrDefault() == null)
        {
            msg = "Kindly Select A Busines Name From The List!";
            await jsRuntime.InvokeVoidAsync("msg", msg);
            return;
        }
        else
        {
            await addToList(name,address);
        }
    }

    [JSInvokable]
    public void hideList()
    {
        hide = "margin-left:10px; padding-top:10px; z-index:9999; padding-left:20px; width:33.7%; overflow-y:auto; height:300px; position:fixed; display:none;";
    }

    private async Task setName(string name,string address)
    {
        await jsRunTime.InvokeVoidAsync("setNameValue", name, address);
        inputName = name;
        hide = "margin-left:10px; padding-top:10px; padding-left:20px; z-index:9999; width:33.7%; overflow-y:auto; height:300px; position:fixed; display:none;";
    }

    private async Task changeName(int cond = 0)
    {
        await jsRunTime.InvokeVoidAsync("loaderVisibility", "block");
        inputName = await jsRunTime.InvokeAsync<string>("getNameValue");
        filterList = fullCustomersList.Where(x => (x.BusinessName != null && x.BusinessName.TrimStart().ToLower().Contains(inputName.ToLower())) || (x.Address1 != null && x.Address1.TrimStart().ToLower().StartsWith(inputName.ToLower()))).ToList();

        if (!String.IsNullOrWhiteSpace(inputZip))
            filterList = filterList.Where(x => x.ZipCode != null && x.ZipCode?.Trim() == inputZip.Trim()).ToList();

        if ((!String.IsNullOrWhiteSpace(inputName) || !String.IsNullOrWhiteSpace(inputZip)) && filterList.Count > 0)
        {
            var orderfilterFirst = filterList.Where(x => x.BusinessName != null && x.BusinessName.Trim().ToLower().StartsWith(inputName.Trim().ToLower())).ToList();
            var orderfilterLast = filterList.Where(x => x.BusinessName == null || !x.BusinessName.Trim().ToLower().StartsWith(inputName.Trim().ToLower())).ToList();
            orderfilterFirst.Where(x => x.BusinessName != null && x.BusinessName.Trim().ToLower().Split(" ").Any(y => y.Trim().StartsWith(inputName))).ToList();

            filterList = new List<Customer>();
            foreach (var order in orderfilterFirst)
                filterList.Add(order);
            foreach (var order in orderfilterLast)
                filterList.Add(order);

            var style = "margin-left:10px; padding-top:10px; z-index:9999; padding-left:20px; width:33.7%; overflow-y:auto; height:300px; position:fixed; display:block";
            await jsRunTime.InvokeVoidAsync("loadSearch", style);
            await jsRunTime.InvokeVoidAsync("loaderVisibility", "none");
        }
        else
        {
            var style = "margin-left:10px; padding-top:10px; z-index:9999; padding-left:20px; width:33.7%; overflow-y:auto; height:300px; position:fixed; display:none";
            await jsRunTime.InvokeVoidAsync("loadSearch", style);
            await jsRunTime.InvokeVoidAsync("loaderVisibility", "none");
        }
    }


    private async void createDelivery()
    {
        await jsRunTime.InvokeVoidAsync("loaderVisibility1", "block");

        Delivery delivery = new Delivery();
        delivery.DeliveryDriver = await jsRuntime.InvokeAsync<string>("getDriver");
        delivery.AtLocation = new string[2];
        delivery.AtLocation[0] = "None";
        delivery.AtLocation[1] = "false";
        string routes = "";
        string addresses = "";
        /*delivery.Coordinates = new NpgsqlPoint[2];
        * 
        * 
        NpgsqlPoint newPoint = new NpgsqlPoint(42.3601, -71.0589);
        delivery.Coordinates[0] = newPoint;
        delivery.Coordinates[1] = newPoint;*/

        string msg = "The following requirements must be fulfilled before continuing: \n";
        string requirements = "";
        if(String.IsNullOrWhiteSpace(delivery.DeliveryDriver))
        {
            requirements += "- Please Select A Driver!\n";
        }
        if (Items.Count==0)
        {
            requirements += "- Please Select At Least One Route!\n";
        }

        if(requirements!="")
        {
            await jsRunTime.InvokeVoidAsync("loaderVisibility1", "none");
            await jsRuntime.InvokeVoidAsync("msg", msg+requirements);
        }
        else
        {
            delivery.Invoices = new string[Items.Count];
            var i = 0;
            foreach (var route in Items)
            {
                routes += route.Label + ":";
                addresses += route.Address + ":";
                Customer cust = fullCustomersList.Where(x => x.BusinessName == route.Label && x.Address1 == route.Address).FirstOrDefault();
                delivery.Invoices[i] = route.Invoice;
                i++;
            }

            delivery.DeliveryRoutes = routes;
            delivery.RouteAddresses = addresses;
            delivery.DriverUserName = delivery.DeliveryDriver?.Substring(delivery.DeliveryDriver.IndexOf(":") + 1);
            delivery.DeliveryDriver = delivery.DeliveryDriver?.Substring(0, delivery.DeliveryDriver.IndexOf(":"));
            delivery.DeliveryStatus = "Start Journey"; 


            if(searchInput!="add")
            {
                delivery.DeliveryId = Int32.Parse(searchInput!);
                await callAPI(delivery, "updateDelivery");
                msg = "The Changes In The Delivery Have Been Successfully Made!";
            }
            else
            {
                await callAPI(delivery, "createDelivery");
                msg = "A New Delivery Has Been Successfully Created!";
            }

            await jsRunTime.InvokeVoidAsync("loaderVisibility1", "none");
            await jsRuntime.InvokeVoidAsync("msg", msg);
            nav.NavigateTo("/manageDeliveries", forceLoad: true);
        }
    }

    public async Task addToList(string name,string address,int cond=0,string invoice="")
    {   
        await jsRunTime.InvokeVoidAsync("setNameValue", "", "");

        if(Items.Where(x=>x.Label==name && x.Address==address).FirstOrDefault()==null)
        {
            if(cond==0)
            {
                if (currentCustID != -1 && currentImage != null)
                {
                    invoice = await UploadImage(currentImage);
                    currentCustID = -1;
                    currentImage = null;
                }
                else
                {
                    Customer cust = fullCustomersList.Where(x => x.BusinessName == name && x.Address1 == address).FirstOrDefault();
                }
            }

            await jsRuntime.InvokeVoidAsync("showDriverList", "block");
            Item item = new Item();
            item.Id = items++;
            item.Label = name;
            item.Address = address;
            item.Invoice = invoice;
            Items.Add(item);
            storedItem = item;
            StateHasChanged();
        }
        else
        {
            currentCustID = -1;
            currentImage = null;
            await jsRuntime.InvokeVoidAsync("msg", "This Route Has Already Been Chosen Before!");
        }
    }

    public class Item
    {
        public int Id { get; set; }
        public string Label { get; set; } = default!;
        public string Address { get; set; } = default!;
        public string Invoice { get; set; } = default!;

    }
    public List<Item> Items = new List<Item>();


    public void hondropOverAFriend(Item friend)
    {
        DragEnter = null;
        if (DraggedItem == null) return;
        if (DraggedItem == friend) return;
        var friendposition = Items.IndexOf(friend);
        Items.Insert(friendposition, DraggedItem!);
        storedItem = DraggedItem;
        DraggedItem = null;
        dragging = false;
    }
    public void hondropBotton()
    {
        DragEnter = null;
        if (DraggedItem == null) return;
        Items.Add(DraggedItem!);
        DraggedItem = null;
    }
    public void hondragstart(DragEventArgs e, Item item)
    {
        dragging = true;
        e.DataTransfer.EffectAllowed = "move"; //does't run
        DraggedItem = item;
        DraggedItemPosition = Items.IndexOf(item);
        Items.Remove(DraggedItem!);
        countItems = Items.Count;
    }
    public void hondragenter(Item item)
        =>
        DragEnter = item;
    public void hondragenterBotton()
        =>
        DragEnter = null;

    [JSInvokable]
    public void hondragend()
    {
        // never fired IDK why
        if (DraggedItem == null) return;
        DragEnter = null;
        Items.Insert(DraggedItemPosition, DraggedItem!);
        storedItem = DraggedItem;
        dragging = false;
        StateHasChanged();  
    }
    private Item? DraggedItem;
    private int DraggedItemPosition;
    private Item? DragEnter;
    private Item? storedItem=new Item();

    public async Task callAPI(Delivery delivery, string uri)
    {
        try
        {
            var baseURI = config.GetValue<string>("Host_IP");
            using (var client = new HttpClient())
            {
                var requestUri = baseURI + "Master/"+uri; // Replace with your API endpoint
                var content = new StringContent(JsonConvert.SerializeObject(delivery), Encoding.UTF8, "application/json");
                var response = await client.PostAsync(requestUri, content);
            }
        }
        catch
        {

        }
    }
}
